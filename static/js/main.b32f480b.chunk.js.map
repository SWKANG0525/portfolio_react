{"version":3,"sources":["main.js","myinfo.js","App.js","serviceWorker.js","index.js"],"names":["Particle","className","Main","props","Mouseover","myRef","React","createRef","clsname","scroller","scrollTo","duration","delay","smooth","particles","i","push","this","subtitle","title","onClick","map","particle","key","Component","Myinfo","App","state","isLoading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gVAMA,SAASA,IAEL,OAAO,yBAAKC,UAAU,oBACtB,yBAAKA,UAAU,Y,IAsEJC,E,kDAhEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAiBVC,UAAY,aAhBR,EAAKC,MAAQC,IAAMC,YAFJ,E,kGAUVC,GACLC,WAASC,SAASF,EAAS,CACvBG,SAAU,IACVC,MAAO,EACPC,OAAQ,qB,+BAaZ,IAJM,IAAD,OAGCC,EAAY,GACVC,EAAI,EAAIA,EAAE,IAAKA,IACnBD,EAAUE,KAAKD,GAGnB,OAEI,gCACI,yBAAKd,UAAY,YACjB,yBAAKA,UAAY,mBACb,yBAAKA,UAAY,mBACb,wBAAIA,UAAW,iBAAiBgB,KAAKd,MAAMe,UAC3C,wBAAIjB,UAAW,cAAcgB,KAAKd,MAAMgB,SAI5C,yBAAKlB,UAAU,oBACf,yBAAKA,UAAY,gBACb,yBAAKA,UAAU,iBAAiBmB,QAAS,kBAAM,EAAKV,SAAS,sBAC7D,yBAAKT,UAAU,wBAKvBa,EAAUO,KAAI,SAAAC,GAAQ,OAAK,kBAACtB,EAAD,CAAUuB,IAAKD,Y,GApDvChB,IAAMkB,WCMVC,G,6KAVP,OACA,iCACI,yBAAKxB,UAAU,0B,GARNK,IAAMkB,YCyCZE,E,4MAlCbC,MAAQ,CAENC,WAAY,G,oGAeZ,OAA4B,IAAzBX,KAAKU,MAAMC,UAEZ,yBAAK3B,UAAU,WACf,kBAAC,EAAD,CAAMkB,MAAM,uBAAQD,SAAS,0CAC7B,kBAAC,EAAD,OAME,2C,GA9BUZ,IAAMkB,WCKJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b32f480b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Main.scss';\r\nimport { scroller } from 'react-scroll'\r\n\r\n\r\n\r\nfunction Particle() { // Generate Particle Func\r\n    \r\n    return <div className=\"circle-container\">\r\n    <div className=\"circle\"></div>\r\n  </div>\r\n}\r\n\r\nclass Main extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.myRef = React.createRef();\r\n      }\r\n\r\n    componentDidMount() {\r\n        \r\n\r\n    }\r\n\r\n    scrollTo(clsname) {\r\n        scroller.scrollTo(clsname, {\r\n            duration: 800,\r\n            delay: 0,\r\n            smooth: 'easeInOutQuart'\r\n          })    \r\n    }\r\n\r\n    Mouseover = () => {\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        \r\n        \r\n        const particles = [] \r\n        for(let i = 0 ; i<100; i++) {\r\n            particles.push(i)\r\n        }\r\n// <div  styles={{ backgroundImage:`url(${car})` }}>\r\n        return(\r\n \r\n            <header>\r\n                <div className = \"main_div\" >                    \r\n                <div className = \"title_container\">\r\n                    <div className = \"focus-in-expand\">\r\n                        <h3 className= \"main_subtitle\">{this.props.subtitle}</h3>\r\n                        <h1 className= \"main_title\">{this.props.title}</h1>\r\n                    </div>\r\n                    </div>\r\n\r\n                    <div className=\"scroll_container\">\r\n                    <div className = \"shake-bottom\">\r\n                        <div className=\"scroll_btn_div\" onClick={() => this.scrollTo('myinfo_container')} >\r\n                        <div className=\"scroll_btn_text\"></div>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n               {particles.map(particle => (<Particle key={particle} /> )) }\r\n               \r\n            </header>\r\n            \r\n        );\r\n\r\n\r\n    }\r\n\r\n\r\n    \r\n    \r\n\r\n}\r\nexport default Main;","import React from 'react';\r\nimport './Myinfo.scss';\r\n\r\nclass Myinfo extends React.Component {\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return(\r\n        <section>\r\n            <div className=\"myinfo_container\">\r\n            </div>\r\n        </section>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Myinfo;","import React from 'react';\nimport './App.css';\nimport Main from './main';\nimport Myinfo from './myinfo'\n\n\n\nclass App extends React.Component {\n\n\n  state = {\n\n    isLoading : true\n\n  };\n\n  \n  \n  componentDidMount() {\n    \n\n\n    }\n\n  render() {\n\n\n    if(this.state.isLoading === true) {\n    return(\n      <div className=\"wrapper\">\n      <Main title=\"강_호동;\" subtitle=\"Hello World ! Welcome to My Portfolio\"/>\n      <Myinfo />\n      </div>\n    );\n    }\n    else {\n      return(\n        <h1>Loading</h1>\n      )\n    }\n  } \n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}